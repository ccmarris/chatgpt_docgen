import logging
import docx

_logger = logging.getLogger(__name__)

def save_responses(prompt_response_pairs: list,
                   filename: str = 'output.docx',
                   output_format: str = 'txt',
                   generate_title: bool = True,
                   title: str = 'Generated Responses',
                   generate_as_prompts: bool = False):
    """
    Save the generated responses to a file or stdout in the specified format.

    Args:
        prompt_response_pairs (list): List of (prompt, response) tuples.
        filename (str): Output file name (used for file-based formats).
        output_format (str): Output format: "docx", "txt", "md", or "stdout".
        generate_toc (bool): (Reserved for future use) If True, generate a table of contents.
        generate_title (bool): (Reserved for future use) If True, include a document title.
        title (str): (Reserved for future use) Title for the document.
        generate_as_prompts (bool): If True, output only responses (no prompts).

    Returns:
        None
    """
    if output_format == "docx":
        _logger.info(f"Saving responses to {filename} in DOCX format")
        # Use the docgen module to save responses to a Word document
        save_responses_to_docx(prompt_response_pairs, filename=filename, 
                               title=title, generate_title=generate_title)
    elif output_format == "txt":
        _logger.info(f"Saving responses to {filename} in TXT format")
        # Save responses to a text file
        with open(filename, "w", encoding="utf-8") as f:
            if generate_title:
                f.write(f"{title}\n")
                f.write("=" * len(title) + "\n\n")
            for prompt, response in prompt_response_pairs:
                if generate_as_prompts:
                    f.write(f"{response}\n")
                else:
                    f.write(f"Prompt: {prompt}\nResponse: {response}\n\n")
    elif output_format == "md":
        _logger.info(f"Saving responses to {filename} in Markdown format")
        # Save responses to a Markdown file
        with open(filename, "w", encoding="utf-8") as f:
            if generate_title:
                f.write(f"# {title}\n\n")
            for prompt, response in prompt_response_pairs:
                f.write(f"## Prompt\n{prompt}\n\n### Response\n{response}\n\n")
    elif output_format == "stdout":
        _logger.info("Printing responses to stdout")
        # Print responses to standard output
        for prompt, response in prompt_response_pairs:
            if generate_as_prompts:
                print(f"{response}")
            else:
                print(f"## Prompt: {prompt}\n## Response: {response}\n")
    else:
        _logger.error(f"Unknown output format: {output_format}")
    
    return


def save_responses_to_docx(prompt_response_pairs, 
                           filename="output.docx",
                           generate_title=True,
                           title="Generated Responses"):
    """
    Save prompt-response pairs to a Word (.docx) document.

    Args:
        prompt_response_pairs (list): List of (prompt, response) tuples.
        filename (str): Output Word document filename.
        generate_title (bool): (Reserved for future use) If True, include a document title.
        title (str): (Reserved for future use) Title for the document.

    Returns:
        None
    """
    doc = docx.Document()
    if generate_title:
        doc.add_heading(title, level=1)
        doc.add_paragraph("Generated by chatgpt_docgen")
        doc.add_page_break()

    for prompt, response in prompt_response_pairs:
        doc.add_heading(prompt, level=2)
        doc.add_paragraph(response)
    doc.save(filename)